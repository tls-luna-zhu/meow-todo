generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                           String          @id @default(uuid())
  email                                        String          @unique
  password                                     String
  username                                     String          @unique
  createdAt                                    DateTime        @default(now())
  updatedAt                                    DateTime        @updatedAt
  Account                                      Account[]
  FriendRequest_FriendRequest_fromUserIdToUser FriendRequest[] @relation("FriendRequest_fromUserIdToUser")
  FriendRequest_FriendRequest_toUserIdToUser   FriendRequest[] @relation("FriendRequest_toUserIdToUser")
  Session                                      Session[]
  todos                                        Todo[]
  User_A                                       User[]          @relation("UserFriends")
  User_B                                       User[]          @relation("UserFriends")
}

model Todo {
  id          String    @id @default(uuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FriendRequest {
  id                                  String   @id
  fromUserId                          String
  toUserId                            String
  status                              String   @default("pending")
  createdAt                           DateTime @default(now())
  updatedAt                           DateTime
  User_FriendRequest_fromUserIdToUser User     @relation("FriendRequest_fromUserIdToUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  User_FriendRequest_toUserIdToUser   User     @relation("FriendRequest_toUserIdToUser", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
